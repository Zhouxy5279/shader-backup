/**
* Example Fragment Shader
* Sets the color and alpha of the pixel by setting gl_FragColor
*/

// Set the precision for data types used in this shader
precision highp float;
precision highp int;

// Default THREE.js uniforms available to both fragment and vertex shader
uniform mat4 modelMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat3 normalMatrix;

// Default uniforms provided by ShaderFrog.
uniform vec3 cameraPosition;
uniform float time;

// A uniform unique to this shader. You can modify it to the using the form
// below the shader preview. Any uniform you add is automatically given a form
uniform vec3 color;
uniform vec3 lightPosition;

// Example varyings passed from the vertex shader
varying vec3 vPosition;
varying vec3 vNormal;
varying vec2 vUv;
varying vec2 vUv2;


mat2 Rot(float a) {
    float s=sin(a), c=cos(a);
    return mat2(c,-s,s,c);
}


float Star(vec2 uv, float a) {  //  float
    vec2 av1 = abs(uv);
 	vec2 av2 = abs(uv*Rot(a));
    vec2 av = min(av1, av2);
    
    float fu = floor(av2[0] * 20.);
    float fv = floor(av2[1] * 20.);
    float m = fu + fv;
    
    if (fu < 4. && fv < 1.) {
        return m/1.+1.;
    }
    else if (fu < 1. && fv < 4.) {
        return m/1.+1.;
    }
    else if (fu >= 4. && fu <= 5. && fv == 0. && mod(time, 1.) < 0.33) {
        return m/1.;
    }
    else if (fu == 0. && fv >= 4. && fv <= 5. && mod(time, 1.) < 0.33) {
        return m/1.;
    }
    else if (fu >= 6. && fu <= 7.  && fv == 0. && mod(time, 1.) < 0.66 && mod(time, 1.) > 0.33) {
        return m/1.;
    }
    else if (fu == 0. && fv >= 6. && fv <= 7.  && mod(time, 1.) < 0.66 && mod(time, 1.) > 0.33) {
        return m/1.;
    }
    else {
        return 0.;
    }

}

void main() {

    // Calculate the real position of this pixel in 3d space, taking into account
    // the rotation and scale of the model. It's a useful formula for some effects.
    // This could also be done in the vertex shader
    vec3 worldPosition = ( modelMatrix * vec4( vPosition, 1.0 )).xyz;

    // Calculate the normal including the model rotation and scale
    vec3 worldNormal = normalize( vec3( modelMatrix * vec4( vNormal, 0.0 ) ) );

    vec3 lightVector = normalize( lightPosition - worldPosition );

    // An example simple lighting effect, taking the dot product of the normal
    // (which way this pixel is pointing) and a user generated light position
    float brightness = dot( worldNormal, lightVector );

    // Fragment shaders set the gl_FragColor, which is a vector4 of
    // ( red, green, blue, alpha ).
    gl_FragColor = vec4( color * Star(vec2(vUv[0] - mod(time*0.1, 1.), vUv[1] - mod(time*0.1, 1.)), 0.), 1.0 );

}